/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef GODZI_APPLICATION
#define GODZI_APPLICATION 1

#include <QObject>
#include <Godzi/Common>
#include <Godzi/Project>
#include <Godzi/DataSources>

namespace Godzi
{
    class ActionManager;

    class GODZI_EXPORT Application : public QObject, public osg::Referenced
    {

    Q_OBJECT
			
    public:
				Application( const std::string& baseMap ="", const std::string& localMap="" );

				static DataSourceFactoryManager* const dataSourceFactoryManager;

        /** The global action manager */
        ActionManager* actionManager() { return _actionMgr; }

    public:
        /** The current active project */
        Project* getProject() { return _project.get(); }
        const Project* getProject() const { return _project.get(); }

        /** Sets a new active project. */
        void setProject( Project* project, const std::string& projectLocation ="" );

        /** Sets the location where this project should be saved. */
        void setProjectLocation( const std::string& value ) {
            _projectLocation = value; }

        /** The location from which this project was loaded or where it should be saved. */
        const std::string& getProjectLocation() const { 
            return _projectLocation; }

        /** Whether the project is "dirty" (has unsaved changes) */
        bool isProjectDirty() const;

        /** Sets the project to "clean" (no unsaved changes) */
        void setProjectClean();
        
        const std::string& getBaseMap() const {
						return _baseMap; }

				const std::string& getLocalMap() const {
						return _localMap; }
						
		signals:
			void projectChanged(osg::ref_ptr<Godzi::Project> oldProject, osg::ref_ptr<Godzi::Project> newProject);
		
    protected:
        osg::ref_ptr<Project>     _project;
        osgEarth::Revision        _projectCheckpoint;
        std::string               _projectLocation;
        std::string						    _baseMap;
				std::string               _localMap;

        ActionManager*            _actionMgr;
    };

} // namespace Godzi

#endif // GODZI_APPLICATION
