/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef GODZI_APPLICATION
#define GODZI_APPLICATION 1

#include <QObject>
//#include <osgEarthDrivers/cache_sqlite3/Sqlite3CacheOptions>
#include <Godzi/Common>
#include <Godzi/Project>
#include <Godzi/DataSources>
#include <Godzi/UI/ViewerWidgets>

namespace Godzi
{
    using namespace Godzi::UI;
    class ActionManager;

    class GODZI_EXPORT Application : public QObject, public osg::Referenced
    {

    Q_OBJECT
			
    public:
				Application(const osgEarth::CacheOptions& cacheOpt, const Godzi::Config& conf=Godzi::Config());
				Application(const Godzi::Config& conf=Godzi::Config());

				/** serializes the app settings to a Config object */
        Config toConfig();

				static DataSourceFactoryManager* const dataSourceFactoryManager;

        /** The global action manager */
        ActionManager* actionManager() { return _actionMgr; }

    public:
        /** The current active project */
        Project* getProject() { return _project.get(); }
        const Project* getProject() const { return _project.get(); }

        /** Sets a new active project. */
        void setProject( Project* project, const std::string& projectLocation ="" );

        /** Sets the location where this project should be saved. */
        void setProjectLocation( const std::string& value ) { _projectLocation = value; }

        /** The location from which this project was loaded or where it should be saved. */
        const std::string& getProjectLocation() const { return _projectLocation; }

				bool getCacheEnabled() const { return _mapCacheEnabled; }
				void setCacheEnabled(bool enabled);

				std::string getCachePath() const;

				void setCache(const osgEarth::CacheOptions& cacheOpt);

				/** The active cache options */
				//const osgEarth::Drivers::Sqlite3CacheOptions& getCacheOptions() const {
				//	return _mapCacheOpt; }

        /** Whether the project is "dirty" (has unsaved changes) */
        bool isProjectDirty() const;

        /** Sets the project to "clean" (no unsaved changes) */
        void setProjectClean();

        /** Sets/gets the 3D view associated with this application */
        void setView( osgViewer::View* view ) { _view = view; }
        osgViewer::View* getView() const { return _view.get(); }
						
		signals:
			void projectChanged(osg::ref_ptr<Godzi::Project> oldProject, osg::ref_ptr<Godzi::Project> newProject);
		
    protected:
        osg::ref_ptr<Project>                   _project;

        osgEarth::Revision                      _projectCheckpoint;
        std::string                             _projectLocation;
        osg::observer_ptr<osgViewer::View>      _view;

				bool                                    _mapCacheEnabled;
				osgEarth::Cache*                        _mapCache;


        ActionManager*                          _actionMgr;

				void initApp(const Godzi::Config& conf);
				void initMapCache(const Godzi::Config& cacheConf, const osgEarth::CacheOptions& cacheOpt);
    };

} // namespace Godzi

#endif // GODZI_APPLICATION
