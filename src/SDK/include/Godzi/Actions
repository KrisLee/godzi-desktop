/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef GODZI_ACTIONS
#define GODZI_ACTIONS 1

#include <Godzi/Common>
#include <list>

namespace Godzi
{
    class Application;

    class GODZI_EXPORT Action : public osg::Referenced
    {
    public:
        virtual bool doAction( void* sender, Application* app ) =0;

        void cancel() {
            _canceled = true; }

        bool isOK() const {
            return _message.empty(); }

        bool isCanceled() const {
            return _canceled; }

        bool isCheckpoint() const {
            return _checkpoint; }

        bool setError( const std::string& message ) {
            _message = message;
            return false; }

        virtual bool isReversible() const {
            return false; }

    protected:
        Action();

        std::string _message;
        bool _canceled;
        bool _checkpoint;
    };

    class GODZI_EXPORT ReversibleAction : public Action
    {
    public:
        virtual bool undoAction( void* sender, Application* app ) =0;

        bool isReversible() const {
            return true; }

    protected:
        ReversibleAction();
    };

    class GODZI_EXPORT ActionContext
    {
    public:
        ActionContext( void* sender ) : _sender(sender) { }

    public:
        void* getSender() { return _sender; }

    protected:
        void* _sender;
    };

    class GODZI_EXPORT ActionCallback : public osg::Referenced
    {
    public:
        virtual void operator()( void* sender, Action* action ) { }

    protected:
        ActionCallback();
    };

    class GODZI_EXPORT ActionManager
    {
    public:
        virtual void addBeforeActionCallback( ActionCallback* cb ) =0;
        virtual void addAfterActionCallback( ActionCallback* cb ) =0;

        virtual bool doAction( void* sender, Action* action, bool reversible =true ) =0;
        virtual bool undoAction() =0;
        virtual bool canUndo() const =0;
        virtual void clearUndoActions() =0;
        virtual ReversibleAction* getNextUndoAction() const =0;

    protected:
        ActionManager();
        static ActionManager* create( Application* app );
        friend class Application;
    };

} // namespace Godzi

#endif // GODZI_ACTIONS
