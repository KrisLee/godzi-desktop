 /* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef GODZI_DATA_SOURCES
#define GODZI_DATA_SOURCES 1

#include <QObject>
#include <Godzi/Common>
#include <Godzi/Actions>
#include <Godzi/Features/KMLFeatureSource>
#include <Godzi/Features/KMLFeatureSourceOptions>
#include <osgEarth/Config>
#include <osgEarth/Revisioning>
#include <osgEarth/TileSource>
#include <osgEarth/ImageLayer>
#include <osgEarth/ModelLayer>
#include <osgEarthDrivers/wms/WMSOptions>
#include <osgEarthDrivers/tms/TMSOptions>

namespace Godzi
{
	class Application;
	class Project;

	class GODZI_EXPORT DataSource : public osgEarth::Revisioned<osg::Referenced>
  {
  public:
		virtual const std::string& getLocation() const =0;
		virtual const std::string& type() const =0;
		
		virtual Config toConfig() const;
		virtual osgEarth::ImageLayer* createImageLayer() const { return 0;}
		virtual osgEarth::ModelLayer* createModelLayer() const { return 0;}
		virtual DataSource* clone() const =0;
		
		osgEarth::optional<std::string>& name() { return _name; }
    const osgEarth::optional<std::string>& name() const { return _name; }

		void setId(unsigned int id) { _id = id; }
		const osgEarth::optional<unsigned int> id() const { return _id; }
    
    void setVisible( bool value ) { _visible = value; }
    bool visible() const { return _visible; }
    
    virtual const std::vector<std::string> getAvailableLayers() const { return NO_LAYERS; }
    //virtual void setAvailableLayers(const std::vector<std::string>& layers) {};
    
    virtual const std::vector<std::string> getActiveLayers() const { return NO_LAYERS; }
    virtual void setActiveLayers(const std::vector<std::string>& layers) {};
    
    virtual const std::string& layerDisplayName (const std::string& layerName) const { return layerName; }
    
    bool error() const { return _error; }
    void setError(bool isError) { _error = isError; }
    
    const std::string& errorMsg() const { return _errorMsg; }
    void setErrorMsg(const std::string& msg) { _errorMsg = msg; }

	protected:
		DataSource(bool visible=true) : _visible(visible), _error(false), _errorMsg("") {};
		DataSource(const Config& conf);
		osgEarth::optional<std::string> _name;
		osgEarth::optional<unsigned int> _id;
		bool _visible;
		bool _error;
		std::string _errorMsg;
		
		static const std::vector<std::string> NO_LAYERS;
	};

	typedef std::vector<osg::ref_ptr<DataSource>> DataSourceVector;
	
	/* --------------------------------------------- */
	
	class GODZI_EXPORT WMSSource : public DataSource
	{
	public:
		static const std::string TYPE_WMS;
	
		WMSSource(const osgEarth::Drivers::WMSOptions& opt, bool visible=true);
		WMSSource(const osgEarth::Drivers::WMSOptions& opt, const std::string& fullUrl, bool visible=true);
		WMSSource(const Config& conf);
		
		const osgEarth::DriverConfigOptions& getOptions() const;
		void setOptions(const osgEarth::Drivers::WMSOptions& opt);

		const std::string& getLocation() const;
		const std::string& type() const { return TYPE_WMS; }
		osgEarth::optional<std::string>& fullUrl() { return _fullUrl; }
		
		Config toConfig() const;
		osgEarth::ImageLayer* createImageLayer() const;
		DataSource* clone() const;
		
		const std::vector<std::string> getAvailableLayers() const;
		void setAvailableLayers(const std::vector<std::string>& layers);
		
    const std::vector<std::string> getActiveLayers() const;
    void setActiveLayers(const std::vector<std::string>& layers);
    
    const std::string& layerDisplayName(const std::string& layerName) const;
    void setLayerDisplayNames(const std::map<std::string, std::string>& nameMap) { _displayNames = nameMap; }

	private:
		osgEarth::Drivers::WMSOptions _opt;
		osgEarth::optional<std::string> _fullUrl;
		std::vector<std::string> _availableLayers;
		std::map<std::string, std::string> _displayNames;
	};
	
	/* --------------------------------------------- */

	class GODZI_EXPORT TMSSource : public DataSource
	{
	public:
		static const std::string TYPE_TMS;
		
		TMSSource(const osgEarth::Drivers::TMSOptions& opt, bool visible=true);
		TMSSource(const Config& conf);
		
		const std::string& getLocation() const;
		const std::string& type() const { return TYPE_TMS; }
		
		Config toConfig() const;
		osgEarth::ImageLayer* createImageLayer() const;
		DataSource* clone() const;

	private:
		osgEarth::Drivers::TMSOptions _opt;
	};

	/* --------------------------------------------- */

	class GODZI_EXPORT KMLSource : public DataSource
	{
	public:
		static const std::string TYPE_KML;
		
		KMLSource(const Godzi::Features::KMLFeatureSourceOptions& opt, bool visible=true);
		KMLSource(const Config& conf);
		
		const std::string& getLocation() const;
		const std::string& type() const { return TYPE_KML; }
		
		const std::vector<std::string> getAvailableLayers() const;
		const std::vector<std::string> getActiveLayers() const;
    void setActiveLayers(const std::vector<std::string>& layers);
		
		Config toConfig() const;
		osgEarth::ModelLayer* createModelLayer() const;
		DataSource* clone() const;
		
	protected:
		KMLSource(const Godzi::Features::KMLFeatureSourceOptions& opt, bool visible, Godzi::Features::KMLFeatureSource* soruce);

	private:
		Godzi::Features::KMLFeatureSourceOptions _opt;
		osg::ref_ptr<Godzi::Features::KMLFeatureSource> _fs;
	};
	
	/* --------------------------------------------- */
	
	class GODZI_EXPORT DataSourceFactory : public osg::Referenced
	{
	public:
		virtual bool canCreate(const Godzi::Config& config) =0;
		virtual DataSource* createDataSource(const Godzi::Config& config) =0;
	};
	
	class GODZI_EXPORT DataSourceFactoryManager
	{
	public:
		virtual void addFactory(DataSourceFactory* factory) =0;
		virtual DataSourceFactory* getFactory(const Godzi::Config& config) =0;

  protected:
      DataSourceFactoryManager();
      static DataSourceFactoryManager* create();
      friend class Godzi::Application;
	};
	
	/* --------------------------------------------- */
	
	class GODZI_EXPORT WMSSourceFactory : public DataSourceFactory
	{
	public:
		bool canCreate(const Godzi::Config& config);
		DataSource* createDataSource(const Godzi::Config& config);
	};

	class GODZI_EXPORT TMSSourceFactory : public DataSourceFactory
	{
	public:
		bool canCreate(const Godzi::Config& config);
		DataSource* createDataSource(const Godzi::Config& config);
	};

	class GODZI_EXPORT KMLSourceFactory : public DataSourceFactory
	{
	public:
		bool canCreate(const Godzi::Config& config);
		DataSource* createDataSource(const Godzi::Config& config);
	};
	
	/* --------------------------------------------- */

	class GODZI_EXPORT AddorUpdateDataSourceAction : public ReversibleAction
	{
	public:
		AddorUpdateDataSourceAction(osg::ref_ptr<DataSource> source, bool dirtyProject=true) : _source(source), _dirtyProject(dirtyProject), _wasUpdate(false) { }

		bool doAction( void* sender, Application* app );
		bool undoAction( void* sender, Application* app );
		
		const DataSource* getDataSource() { return _source.get(); };

	protected:
		osg::ref_ptr<DataSource> _source;
		osg::ref_ptr<DataSource> _oldSource;
		bool _dirtyProject;
		bool _wasUpdate;
		bool _wasDirty;
	};
	
	class GODZI_EXPORT RemoveDataSourceAction : public ReversibleAction
	{
	public:
		RemoveDataSourceAction(osg::ref_ptr<DataSource> source) : _source(source) { }

		bool doAction( void* sender, Application* app );
		bool undoAction( void* sender, Application* app );
		
		const DataSource* getDataSource() { return _source.get(); };

	protected:
		osg::ref_ptr<DataSource> _source;
	};

	class GODZI_EXPORT MoveDataSourceAction : public ReversibleAction
	{
	public:
		MoveDataSourceAction(osg::ref_ptr<Godzi::DataSource> source, int newIndex) : _source(source), _newIndex(newIndex) { }

		bool doAction( void* sender, Application* app );
		bool undoAction( void* sender, Application* app );

	protected:
		osg::ref_ptr<Godzi::DataSource> _source;
		int _newIndex;
		int _oldIndex;
	};
	
	//class GODZI_EXPORT SelectDataSourceAction : public Action
	//{
	//public:
	//  SelectDataSourceAction(osg::ref_ptr<DataSource> source) : _source(source) { }
	//  
	//  bool doAction(void* sender, Application* app);
	//  
	//  const DataSource* getDataSource() { return _source.get(); };
	//  
	//protected:
	//  osg::ref_ptr<DataSource> _source;
	//};
}

#endif // GODZI_DATA_SOURCES
