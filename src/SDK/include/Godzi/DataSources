 /* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef GODZI_DATA_SOURCES
#define GODZI_DATA_SOURCES 1

#include <QObject>
#include <Godzi/Common>
#include <Godzi/Actions>
#include <osgEarth/Config>
#include <osgEarth/Revisioning>
#include <osgEarth/TileSource>
#include <osgEarth/ImageLayer>
#include <osgEarth/ModelLayer>
#include <osgEarthDrivers/tms/TMSOptions>
#include <string>

namespace Godzi
{
	class Application;
	class Project;

    /**
     * A revisioned data object reference. This is an ID-based reference to an
     * implementation-specific object in a DataSource, coupled with a readable
     * description that is suitable for use in the UI.
     *
     * no export; header only
     */
    class /*GODZI_EXPORT*/ DataObjectSpec
    {
    public:
        DataObjectSpec() { }
        DataObjectSpec( int objectUID, const std::string& text, bool canHide=false ) : _objectUID( objectUID ), _text(text), _canHide(canHide) { }
				DataObjectSpec( const DataObjectSpec& rhs ) : _objectUID(rhs._objectUID), _text(rhs._text), _canHide(rhs._canHide) { }

        /** Gets the unique ID of the object to which this token is referring. */
        int getObjectUID() const { return _objectUID; }

        const std::string& getText() const { return _text; }

				bool canHide() const { return _canHide; }

    protected:
        int _objectUID;
        std::string _text;
				bool _canHide;
    };

    typedef std::vector<DataObjectSpec> DataObjectSpecVector;
    class DataSource;

    /**
     * Base class for an action specification. An Action Specification gives the 
     * UI a way to present an action to the user (via the text and description),
     * and a means to instantiate the related Action. A DataSource will provide
     * set of Action Specifications for actions on its data objects. The UI can
     * then present those actions to the user however it sees fit, e.g., via a
     * context menu or a toolbar.
     */
    class /*GODZI_EXPORT*/ DataObjectActionSpecBase : public osg::Referenced
    {
    public:
        const std::string& getText() const { return _text; }
        const std::string& getDescription() const { return _description; }
        bool isDefaultAction() const { return _isDefault; }

        virtual Action* createAction( const DataSource* ds, int objectUID ) const =0;

    protected:
        DataObjectActionSpecBase( const std::string& text, const std::string& description, bool isDefault )
            : _text(text), _description(description), _isDefault(isDefault) { }

        std::string _text;
        std::string _description;
        bool _isDefault;
    };

    typedef std::vector< osg::ref_ptr<DataObjectActionSpecBase> > DataObjectActionSpecVector;

    /** Templatized concrete instance of an action specification. (see above) */
    template<typename T>
    class /*GODZI_EXPORT*/ DataObjectActionSpec : public DataObjectActionSpecBase
    {
    public:
        DataObjectActionSpec( const std::string& text, const std::string& description, bool isDefault =false )
            : DataObjectActionSpecBase( text, description, isDefault ) { }

        Action* createAction( const DataSource* ds, int objectUID ) const {
            return new T( ds, objectUID );
        }
    };

    /** 
     * An object that provided data to the application.
     */
    class GODZI_EXPORT DataSource : public osgEarth::Revisioned<osg::Referenced>
    {
    public:
        virtual const std::string& getLocation() const =0;
        virtual const std::string& type() const =0;

        virtual Config toConfig() const;
        virtual osgEarth::ImageLayer* createImageLayer() const { return 0;}
        virtual osgEarth::ModelLayer* createModelLayer() const { return 0;}
        virtual DataSource* clone() const =0;

        osgEarth::optional<std::string>& name() { return _name; }
        const osgEarth::optional<std::string>& name() const { return _name; }

        void setId(unsigned int id) { _id = id; }
        const osgEarth::optional<unsigned int> id() const { return _id; }

        void setVisible( bool value ) { _visible = value; }
        bool visible() const { return _visible; }

        /** Gets the complete set of tokens for the objects provided by this source. */
        virtual bool getDataObjectSpecs( DataObjectSpecVector& out_objectSpecs ) const { return false; }

        /** Gets a set of action specifications pertaining to objects in this data source. */
        virtual bool getDataObjectActionSpecs( DataObjectActionSpecVector& out_actionSpecs ) const { return false; }

				virtual bool getObjectSpecVisibility(int id) const { return true; }

        bool error() const { return _error; }
        void setError(bool isError) { _error = isError; }

        const std::string& errorMsg() const { return _errorMsg; }
        void setErrorMsg(const std::string& msg) { _errorMsg = msg; }

    protected:
        DataSource(bool visible=true) : _visible(visible), _error(false), _errorMsg("") {};
        DataSource(const Config& conf);
        osgEarth::optional<std::string> _name;
        osgEarth::optional<unsigned int> _id;
        bool _visible;
        bool _error;
        std::string _errorMsg;

        static const std::vector<std::string> NO_LAYERS;
    };

	typedef std::vector<osg::ref_ptr<DataSource>> DataSourceVector;
	
	/* --------------------------------------------- */

	class GODZI_EXPORT TMSSource : public DataSource
	{
	public:
		static const std::string TYPE_TMS;
		
		TMSSource(const osgEarth::Drivers::TMSOptions& opt, bool visible=true);
		TMSSource(const Config& conf);
		
		const std::string& getLocation() const;
		const std::string& type() const { return TYPE_TMS; }
		
		Config toConfig() const;
		osgEarth::ImageLayer* createImageLayer() const;
		DataSource* clone() const;

	private:
		osgEarth::Drivers::TMSOptions _opt;
	};

	/* --------------------------------------------- */
	
	class GODZI_EXPORT DataSourceFactory : public osg::Referenced
	{
	public:
		virtual bool canCreate(const Godzi::Config& config) =0;
		virtual DataSource* createDataSource(const Godzi::Config& config) =0;
	};
	
	class GODZI_EXPORT DataSourceFactoryManager
	{
	public:
		virtual void addFactory(DataSourceFactory* factory) =0;
		virtual DataSourceFactory* getFactory(const Godzi::Config& config) =0;

  protected:
      DataSourceFactoryManager();
      static DataSourceFactoryManager* create();
      friend class Godzi::Application;
	};

	class GODZI_EXPORT TMSSourceFactory : public DataSourceFactory
	{
	public:
		bool canCreate(const Godzi::Config& config);
		DataSource* createDataSource(const Godzi::Config& config);
	};
	
	/* --------------------------------------------- */

	class GODZI_EXPORT AddorUpdateDataSourceAction : public ReversibleAction
	{
	public:
		AddorUpdateDataSourceAction(osg::ref_ptr<DataSource> source, bool dirtyProject=true) : _source(source), _dirtyProject(dirtyProject), _wasUpdate(false) { }

		bool doAction( void* sender, Application* app );
		bool undoAction( void* sender, Application* app );
		
		const DataSource* getDataSource() { return _source.get(); };

	protected:
		osg::ref_ptr<DataSource> _source;
		osg::ref_ptr<DataSource> _oldSource;
		bool _dirtyProject;
		bool _wasUpdate;
		bool _wasDirty;
	};
	
	class GODZI_EXPORT RemoveDataSourceAction : public ReversibleAction
	{
	public:
		RemoveDataSourceAction(osg::ref_ptr<DataSource> source) : _source(source) { }

		bool doAction( void* sender, Application* app );
		bool undoAction( void* sender, Application* app );
		
		const DataSource* getDataSource() { return _source.get(); };

	protected:
		osg::ref_ptr<DataSource> _source;
	};

	class GODZI_EXPORT MoveDataSourceAction : public ReversibleAction
	{
	public:
		MoveDataSourceAction(osg::ref_ptr<Godzi::DataSource> source, int newIndex) : _source(source), _newIndex(newIndex) { }

		bool doAction( void* sender, Application* app );
		bool undoAction( void* sender, Application* app );

	protected:
		osg::ref_ptr<Godzi::DataSource> _source;
		int _newIndex;
		int _oldIndex;
	};

	class GODZI_EXPORT ToggleDataSourceAction : public ReversibleAction
	{
	public:
		ToggleDataSourceAction(unsigned int id, bool visible) : _id(id), _visible(visible), _changed(false) { }
		ToggleDataSourceAction(Godzi::DataSource* source, bool visible) : _visible(visible), _changed(false) { if (source && source->id().isSet()) _id = source->id().get();  }

		bool doAction(void* sender, Application* app);
		bool undoAction( void* sender, Application* app );

		osgEarth::optional<unsigned int> id() { return _id; };

		bool visible() { return _visible; };

	protected:
		osgEarth::optional<unsigned int> _id;
		bool _visible;
		bool _changed;
	};
	
	//class GODZI_EXPORT SelectDataSourceAction : public Action
	//{
	//public:
	//  SelectDataSourceAction(osg::ref_ptr<DataSource> source) : _source(source) { }
	//  
	//  bool doAction(void* sender, Application* app);
	//  
	//  const DataSource* getDataSource() { return _source.get(); };
	//  
	//protected:
	//  osg::ref_ptr<DataSource> _source;
	//};
}

#endif // GODZI_DATA_SOURCES
