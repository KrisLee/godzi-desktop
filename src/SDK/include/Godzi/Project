/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef GODZI_PROJECTS
#define GODZI_PROJECTS 1

#include <QObject>
#include <Godzi/Common>
#include <Godzi/Actions>
#include <Godzi/DataSources>
#include <osgEarth/Config>
#include <osgEarth/Map>
#include <osgEarth/Revisioning>

namespace Godzi
{
    class Application;

    class GODZI_EXPORT ProjectProperties
    {
    public:
        ProjectProperties();
        ProjectProperties( const Config& conf );

        Config toConfig() const;

        /** Name of the project */
        osgEarth::optional<std::string>& name() { return _name; }
        const osgEarth::optional<std::string>& name() const { return _name; }
        
        /** Base map file (if not default) */
        osgEarth::optional<std::string>& map() { return _map; }
        const osgEarth::optional<std::string>& map() const {return _map; }

				/** Visible base map image layers **/
				osgEarth::optional<std::string>& visibleImageLayers() { return _visibleImageLayers; }
				const osgEarth::optional<std::string>& visibleImageLayers() const { return _visibleImageLayers; }

				/** Visible base map model layers **/
				osgEarth::optional<std::string>& visibleModelLayers() { return _visibleModelLayers; }
				const osgEarth::optional<std::string>& visibleModelLayers() const { return _visibleModelLayers; }

    protected:
        osgEarth::optional<std::string> _name;
        osgEarth::optional<std::string> _map;
				osgEarth::optional<std::string> _visibleImageLayers;
				osgEarth::optional<std::string> _visibleModelLayers;
    };

    /**
     * Project holds an serializable application configuration state.
     */
    class GODZI_EXPORT Project : public QObject, public osgEarth::Revisioned<osg::Referenced>
    {
    
    Q_OBJECT
    
    public:
				Project(osgEarth::Map* defaultMap=0L, const Config& conf=Config());

        /** serializes the project to a Config object */
        Config toConfig();

        const ProjectProperties& getProperties() const { return _props; }
        void setProperties( const ProjectProperties& props ) { _props = props; }
        
        void addDataSource(osg::ref_ptr<Godzi::DataSource> source);
        int removeDataSource(Godzi::DataSource* source);
        bool updateDataSource(Godzi::DataSource* source, bool dirtyProject=true, Godzi::DataSource** out_old = 0);
        int moveDataSource(Godzi::DataSource* source, int position);
				bool toggleDataSource(unsigned int id, bool visible);
        
				void getSources(Godzi::DataSourceVector& out_list) const;
				int getNumSources() const;

        /** The map model */
        osgEarth::Map* map() { return _map.get(); }
        const osgEarth::Map* map() const { return _map.get(); }
				//void setMap(osgEarth::Map* map);
        
    signals:
			//void mapChanged(osg::ref_ptr<osgEarth::Map> map);
			void dataSourceAdded(osg::ref_ptr<const Godzi::DataSource> source, int position);
			void dataSourceRemoved(osg::ref_ptr<const Godzi::DataSource> source);
			void dataSourceMoved(osg::ref_ptr<const Godzi::DataSource> source, int position);
			void dataSourceToggled(unsigned int id, bool visible);
			void dataSourceUpdated(osg::ref_ptr<const Godzi::DataSource> source);

    protected:
				struct SourcedLayers
				{
						osg::ref_ptr<Godzi::DataSource>    source;
						osg::ref_ptr<osgEarth::ImageLayer> imageLayer;
						osg::ref_ptr<osgEarth::ModelLayer> modelLayer;

						SourcedLayers() : source(0L), imageLayer(0), modelLayer(0) {}
                        SourcedLayers(Godzi::DataSource* src, osgEarth::ImageLayer* imageLyr, osgEarth::ModelLayer* modelLyr)
								: source(src), imageLayer(imageLyr), modelLayer(modelLyr) {}

						bool valid() const { return source.valid(); }
						unsigned int id() { return valid() ? source->id().get() : 0; }
				};

        unsigned int _currentUID;
        osg::ref_ptr<osgEarth::Map> _map;
        ProjectProperties _props;
				std::vector<SourcedLayers> _sourceLayers;
				int _baseLayerOffset;
        
        unsigned int getUID();
        void setVisibleLayers();
				void updateVisibleLayers();
				void addSource(osg::ref_ptr<Godzi::DataSource> source, int index=-1);
				int removeSource(Godzi::DataSource* source, Godzi::DataSource** out_removed=0L);
				osgEarth::ImageLayer* createImageLayer(osg::ref_ptr<const Godzi::DataSource> source, int index=-1);
				osgEarth::ModelLayer* createModelLayer(osg::ref_ptr<const Godzi::DataSource> source, int index=-1);
				int findSourceLayersIndex(unsigned int id);
    };

    /**
     * Action that creates a new empty project in the application.
     */
    class GODZI_EXPORT NewProjectAction : public Action
    {
    public:
				NewProjectAction(osgEarth::Map* defaultMap=0L): _map(defaultMap) { }

        bool doAction( void* sender, Application* app );
        bool isCheckPoint() { return true; }

		protected:
			osg::ref_ptr<osgEarth::Map> _map;
    };

    /**
     * Action that opens a project from the specified location and makes it the current
     * project in the application.
     */
    class GODZI_EXPORT OpenProjectAction : public Action
    {
    public:
        OpenProjectAction( const std::string& location, osgEarth::Map* defaultMap=0L ) : _location(location), _defaultMap(defaultMap) { }

        bool doAction( void* sender, Application* app );
        bool isCheckpoint() { return true; }

    protected:
        std::string _location;
				osg::ref_ptr<osgEarth::Map> _defaultMap;
    };

    /**
     * Action that saves the current project to the last location or to a new location (save-as)
     */
    class GODZI_EXPORT SaveProjectAction : public Action
    {
    public:
        SaveProjectAction( const std::string& location ="" ) : _location(location) { }

        bool doAction( void* sender, Application* app );

    protected:
        std::string _location;
    };

    /**
     * Action that updates the current project with a new set of properties.
     */
    class GODZI_EXPORT UpdateProjectPropertiesAction : public ReversibleAction
    {
    public:
        UpdateProjectPropertiesAction( const ProjectProperties& props ) : _newProps(props) { }

        bool doAction( const ActionContext& context, Application* app );
        bool undoAction( const ActionContext& context, Application* app );

    protected:
        ProjectProperties _newProps;
        ProjectProperties _oldProps;
    };

} // namespace Godzi

#endif // GODZI_PROJECTS
