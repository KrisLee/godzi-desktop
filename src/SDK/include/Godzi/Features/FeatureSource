/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef GODZI_FEATURE_SOURCE
#define GODZI_FEATURE_SOURCE 1

#include <osgEarthFeatures/FeatureSource>

namespace Godzi { namespace Features {

        class KMLFeatureSourceOptions : public osgEarth::Features::FeatureSourceOptions
        {
        public:
            osgEarth::optional<std::string>& url() { return _url; }
            const osgEarth::optional<std::string>& url() const { return _url; }

        public:
            KMLFeatureSourceOptions( const osgEarth::PluginOptions* opt =0L ) : osgEarth::Features::FeatureSourceOptions( opt ) {
                driver() = "kml";
                config().getIfSet<std::string>( "url", _url );
            }

        protected:
            osgEarth::Config toConfig() const {
                osgEarth::Config conf = osgEarth::Features::FeatureSourceOptions::toConfig();
                conf.updateIfSet( "url", _url );
                return conf;
            }

            optional<std::string> _url;
        };


        class KMLFeatureCursor : public osgEarth::Features::FeatureCursor
        {
        public:
            KMLFeatureCursor(const osgEarth::Features::FeatureList& featureList);
            //KMLFeatureCursor();
            bool hasMore() const;
            osgEarth::Features::Feature* nextFeature();

        protected:
            osgEarth::Features::FeatureList _featureList;
            osgEarth::Features::FeatureList::iterator _iterator;
        };

        class KMLFeatureSource :  public osgEarth::Features::FeatureSource
        {
        public:
            void initialize( const std::string& referenceURI );
            KMLFeatureSource(const osgEarth::PluginOptions* options);
            osgEarth::Features::FeatureCursor* createFeatureCursor( const Symbology::Query& query );
        protected:

            osgEarth::Features::FeatureProfile* createFeatureProfile();

            osg::ref_ptr<const KMLFeatureSourceOptions> _options;
            osgEarth::Features::FeatureList _features;
            std::string _url;
        };

}}
#endif
