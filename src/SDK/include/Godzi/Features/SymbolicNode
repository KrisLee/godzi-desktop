/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef GODZI_SYMBOLIC_NODE
#define GODZI_SYMBOLIC_NODE 1

#include <Godzi/Common>
#include <osg/Object>
#include <Godzi/Features/Placemark>
#include <osgEarthSymbology/SymbolicNode>
#include <osgEarthSymbology/Symbolizer>
#include <osgEarthSymbology/MarkerSymbol>
#include <osgEarth/MapNode>


namespace Godzi { namespace Features {

        class PlacemarkContent : public osgEarth::Symbology::Content<osg::Referenced>
        {
        public:
            PlacemarkContent(Placemark* placemark) { setPlacemark(placemark); }
            const Placemark* getPlacemark() const { return _placemark.get(); }
            void setPlacemark(Placemark* placemark) { _placemark = placemark; }
        protected:
            osg::ref_ptr<Placemark> _placemark;
            osg::ref_ptr<osgEarth::MapLayer> _layer;
        };

        class PlacemarkContext : public osgEarth::Symbology::SymbolizerContext
        {
        public:
            PlacemarkContext(osgEarth::MapNode* mapnode) : _mapNode(mapnode) {}
            osgEarth::MapNode* getMapNode() { return _mapNode.get(); }

        protected:
            osg::observer_ptr<osgEarth::MapNode> _mapNode;
        };

        typedef osgEarth::Symbology::State<PlacemarkContent> PlacemarkState;
        typedef osgEarth::Symbology::SymbolicNode< PlacemarkState > PlacemarkSymbolicNode;


        class GODZI_EXPORT PlacemarkSymbolizer : public osgEarth::Symbology::Symbolizer<PlacemarkState>
        {
        public:    
            PlacemarkSymbolizer();
            virtual bool compile(PlacemarkState* state, osg::Group* attachPoint);

            class PlacemarkSymbolizerOperator
            {
            public:
                osg::Node* operator()(const Placemark* placemark,
                                      const osgEarth::Symbology::Style* style,
                                      PlacemarkContext* context);

                osg::Group* createMarker(const Placemark* placemark,
                                         const osgEarth::Symbology::MarkerSymbol* style,
                                         PlacemarkContext* context);
#if 0
                osg::Group* createPolygon(const Placemark* placemark, 
                                          const osgEarth::Symbology::PolygonSymbol* symbol, 
                                          PlacemarkContext* context);
#endif
            };
        };

}}

#endif
