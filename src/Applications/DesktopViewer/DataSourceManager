/* --*-c++-*-- */
/**
 * Godzi
 * Copyright 2010 Pelican Mapping
 * http://pelicanmapping.com
 * http://github.com/gwaldron/godzi
 *
 * Godzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
 */
 
#include <QObject>
#include <Godzi/Application>
#include <Godzi/Project>
#include <osgEarthUtil/WMS>

class DataSourceManager : public QObject//, public Godzi::ActionCallback
{

	Q_OBJECT

	public:
		DataSourceManager(Godzi::Application* app);
		
		//void operator()( void* sender, Godzi::Action* action );
		
	private slots:
		void onProjectChanged(osg::ref_ptr<Godzi::Project> oldProject, osg::ref_ptr<Godzi::Project> newProject);
		void onDataSourceAdded(osg::ref_ptr<const Godzi::DataSource> source, int position);
		void onDataSourceRemoved(osg::ref_ptr<const Godzi::DataSource> source);
		void onDataSourceMoved(osg::ref_ptr<const Godzi::DataSource> source, int position);
		void onDataSourceUpdated(osg::ref_ptr<const Godzi::DataSource> source);
		
	private:
		struct SourcedLayers
		{
			unsigned int id;
			bool valid;
			osg::ref_ptr<osgEarth::ImageLayer> imageLayer;
			osg::ref_ptr<osgEarth::ModelLayer> modelLayer;

			SourcedLayers() : id(0), valid(false), imageLayer(0), modelLayer(0) {}
			SourcedLayers(unsigned int lyrId, osgEarth::ImageLayer* imageLyr, osgEarth::ModelLayer* modelLyr)
				: id(lyrId), valid(true), imageLayer(imageLyr), modelLayer(modelLyr) {}
		};

		osg::ref_ptr<Godzi::Application> _app;
		std::vector<SourcedLayers> _sourceLayers;
		int _baseLayerOffset;
		
		void addDataSource(osg::ref_ptr<const Godzi::DataSource> source, int index=-1);
		int removeDataSource(osg::ref_ptr<const Godzi::DataSource> source);
		osgEarth::ImageLayer* createImageLayer(osg::ref_ptr<const Godzi::DataSource> source, int index=-1);
		osgEarth::ModelLayer* createModelLayer(osg::ref_ptr<const Godzi::DataSource> source, int index=-1);
		int findSourceLayersIndex(unsigned int id);
};
