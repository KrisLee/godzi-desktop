# Macro to generate dependency lists for a project; contains common setup routines to be used with create_project, create_library, and create_executable
# Usage: create_dependency_lists(LISTPREFIX
#                       PROJECT_PATH
#                       [DEPENDENCIES [<project-name> [<project-name> [...]]] [INTERNAL <project-name>] ... ]
#                       [LIBDEPENDENCIES [<project-name> [<project-name> [...]]] [INTERNAL <project-name>] ... ]
#                       [INCLUDE_PATH [<include-path> [<include-path> [...]]] [INTERNAL <include-path>] ... ]
#                       [DEFINITIONS [<definition> [<definition> [...]]] [INTERNAL <definition>] ... ]
#                       [LIBRARY_PATH [<library-path> [<library-path> [...]]] [INTERNAL <library-path>] ... ]
#                       [LIBRARIES [<library> [<library> [...]]] [INTERNAL <library>] ... ])
#
# Creates lists containing a project's include path, definitions, library path, and libary values to be used with projects and targets which depend 
# on the project with which the lists are associated.  Two sets of lists are created for values with internal and external scopes.  The lists are 
# The variables are named as ${LISTPREFIX}_INTERNAL_LIBDEPENDENCIES, ${LISTPREFIX}_INTERNAL_INCLUDE_PATH, ${LISTPREFIX}_INTERNAL_DEFINITIONS, ${LISTPREFIX}_INTERNAL_LIBRARY_PATH, 
# ${LISTPREFIX}_INTERNAL_LIBRARIES, ${LISTPREFIX}_EXTERNAL_LIBDEPENDENCIES, ${LISTPREFIX}_EXTERNAL_INCLUDE_PATH, ${LISTPREFIX}_EXTERNAL_DEFINITIONS, ${LISTPREFIX}_EXTERNAL_LIBRARY_PATH, 
# and ${LISTPREFIX}_EXTERNAL_LIBRARIES.  The external lists are intended for export as global variables (through the cache) by the project calling
# the create_dependency_lists macro, while the internal lists are intended for use by the calling project only.  
#
# Only the LISTPREFIX and PROJECT_PATH parameters are required.  All other parameters are optional.  LISTPREFIX defines the prefix with which 
# each list will be created.  PROJECT_PATH specifies the directory containing the project with which the lists are associated; it is used for making 
# relative paths absolute.  
#
# The DEPENDENCIES parameter specifies a list of project names for projects with dependency lists which should be included with the dependency
# lists to be generated by the macro.  The names are the values specified for the LISTPREFIX parameter (or project/target name) when the 
# prject's dependecy lists were created.  Include paths, definitions, library paths, and libraries associated with each dependency
# will automatically be added for the current project.  Values from projects not marked INTERNAL will also be exported 
# as part of the include path, definitions, library path, and libraries lists to be created.  
#
# The LIBDEPENDENCIES parameter is like the DEPENDENCIES parameter for library targets created with the create_library macro 
# instead of projects created by the create_project macro.  The <library-name> value is included as a link dependency of a project.  
#
# INCLUDE_PATH, DEFINITIONS, LIBRARY_PATH, and LIBRARIES define values which are not specified by any
# of the projects specified with the DEPENDENCIES parameter.  This could include system or external third-party dependencies.  
# Values not marked INTERNAL will be added to the dependency lists to be created.  

macro(create_dependency_lists LISTPREFIX PROJECT_PATH)

    # Argument list names
    set(arglists "DEPENDENCIES;LIBDEPENDENCIES;INCLUDE_PATH;DEFINITIONS;LIBRARY_PATH;LIBRARIES")

    # Get argument lists
    parse_arguments(ARG "${arglists}" "" ${ARGN})

    # Separate internal and external values for each list
    foreach(arglist ${arglists})

        # add values to external and internal lists
        set(value_scope "EXTERNAL")
        foreach(value ${ARG_${arglist}})
        
            # Make relative paths absolute
            if(arglist MATCHES "PATH" AND NOT IS_ABSOLUTE ${value})
                # Exclude the . for aesthetics
                if(value STREQUAL ".")
                  set(value ${PROJECT_PATH})
                else(value STREQUAL ".")
                  set(value ${PROJECT_PATH}/${value})
                endif(value STREQUAL ".")
            endif(arglist MATCHES "PATH" AND NOT IS_ABSOLUTE ${value})

            if(value STREQUAL "INTERNAL")
                # Set scope for next value to internal
                set(value_scope "INTERNAL")
            else(is_internal)
                # DEPENDENCIES and LIBDEPENDENCIES are special cases
                if(arglist STREQUAL "DEPENDENCIES")
                    # Append the dependency name
                    unique_append(${LISTPREFIX}_${value_scope}_DEPENDENCIES ${value})

                    # Append the dependencies
                    unique_append(${LISTPREFIX}_${value_scope}_INCLUDE_PATH ${${value}_DEP_INCLUDE_PATH})
                    unique_append(${LISTPREFIX}_${value_scope}_DEFINITIONS ${${value}_DEP_DEFINITIONS})
                    unique_append(${LISTPREFIX}_${value_scope}_LIBRARY_PATH ${${value}_DEP_LIBRARY_PATH})
                    unique_append(${LISTPREFIX}_${value_scope}_LIBRARIES ${${value}_DEP_LIBRARIES})
                    unique_append(${LISTPREFIX}_${value_scope}_DEPENDENCIES ${${value}_DEP_DEPENDENCIES})
                    unique_append(${LISTPREFIX}_${value_scope}_LIBDEPENDENCIES ${${value}_DEP_LIBDEPENDENCIES})
                elseif(arglist STREQUAL "LIBDEPENDENCIES")
                    # Append the library name
                    unique_append(${LISTPREFIX}_${value_scope}_LIBDEPENDENCIES ${value})

                    # Append the library's dependencies
                    unique_append(${LISTPREFIX}_${value_scope}_INCLUDE_PATH ${${value}_LIB_INCLUDE_PATH})
                    unique_append(${LISTPREFIX}_${value_scope}_DEFINITIONS ${${value}_LIB_DEFINITIONS})
                    unique_append(${LISTPREFIX}_${value_scope}_LIBRARY_PATH ${${value}_LIB_LIBRARY_PATH})
                    unique_append(${LISTPREFIX}_${value_scope}_LIBRARIES ${${value}_LIB_LIBRARIES})
                    unique_append(${LISTPREFIX}_${value_scope}_DEPENDENCIES ${${value}_LIB_DEPENDENCIES})
                    unique_append(${LISTPREFIX}_${value_scope}_LIBDEPENDENCIES ${${value}_LIB_LIBDEPENDENCIES})
                else(arglist STREQUAL "DEPENDENCIES")
                    unique_append(${LISTPREFIX}_${value_scope}_${arglist} ${value})
                endif(arglist STREQUAL "DEPENDENCIES")

                # Reset value_scope after appending an internal (or external) item
                set(value_scope "EXTERNAL")
            endif(value STREQUAL "INTERNAL")

        endforeach(value ${ARG_${arglist}})

    endforeach(arglist ${arglists})

endmacro(create_dependency_lists LISTPREFIX PROJECT_PATH)
